{"version":3,"file":"static/js/663.f68fc242.chunk.js","mappings":"8VAEaA,EAAWC,EAAAA,GAAAA,GAAH,wRAYRC,EAAWD,EAAAA,GAAAA,GAAH,gZAcRE,EAAaF,EAAAA,GAAAA,IAAH,sJAUVG,EAAcH,EAAAA,GAAAA,IAAH,wG,SC5BlBI,EACE,OADFA,EAEK,UAFLA,EAGK,UAHLA,EAIG,QA4DT,EAzDa,WACX,OAAkCC,EAAAA,EAAAA,YAAlC,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA4BF,EAAAA,EAAAA,UAASD,GAArC,eAAOI,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAgBR,OAdAE,EAAAA,EAAAA,YAAU,WACRL,EAAUL,IACVW,EAAAA,EAAAA,IAAgBH,GACbI,MAAK,SAAAC,GACJV,EAAaU,EAAKC,MAClBT,EAAUL,EACX,IACAe,OAAM,SAAAT,GACLH,EAAa,CAAC,GACdI,EAASD,GACTD,EAAUL,EACX,GACJ,GAAE,CAACQ,KAGF,+BACGJ,IAAWJ,GAAkBE,GAAaA,EAAUc,OAAS,GAC5D,0BACE,SAACrB,EAAD,UACGO,EAAUe,KACT,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,aAAcC,EAA5B,EAA4BA,cAAeC,EAA3C,EAA2CA,UAA3C,OACE,UAACxB,EAAD,YACE,SAACC,EAAD,WACE,gBACEwB,IACEH,EAAY,UAzCf,mCAyCe,OACUA,GAClBI,EAENC,IAAKJ,OAGT,UAACrB,EAAD,YACE,wBAAKqB,KACL,uCAAeC,UAbJH,EADjB,SAsBN,+DAEDd,IAAWJ,IAAkB,SAACyB,EAAA,EAAD,IAC7BrB,IAAWJ,IAAgB,SAAC0B,EAAA,EAAD,UAAQpB,MAGzC,C,4CClED,IAJc,SAAC,GAAc,EAAZA,MACf,OAAO,6DACR,C,iMCFKqB,EAAW,gCACXC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6FACCC,EADD,UACUH,EADV,oCAC8CC,GAD9C,SAEkBG,EAAAA,EAAAA,IAAUD,GAF5B,cAECE,EAFD,yBAGEA,EAASnB,KAAKoB,SAHhB,kEAMA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+B1B,GAA/B,uFACkBuB,EAAAA,EAAAA,IAAA,UAClBJ,EADkB,iBACDnB,EADC,oBACkBoB,IAFpC,cACCI,EADD,yBAIEA,EAASnB,MAJX,kEAOA,SAAesB,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,uFACkBL,EAAAA,EAAAA,IAAA,UAClBJ,EADkB,gCACcC,EADd,kBAC+BQ,IAFjD,cACCJ,EADD,yBAIEA,EAASnB,KAAKoB,SAJhB,kEAMA,SAAetB,EAAtB,+CAAO,OAAP,oBAAO,WAA+BH,GAA/B,uFACkBuB,EAAAA,EAAAA,IAAA,UAClBJ,EADkB,iBACDnB,EADC,4BAC0BoB,EAD1B,oBADlB,cACCI,EADD,yBAIEA,EAASnB,MAJX,kEAOA,SAAewB,EAAtB,+CAAO,OAAP,oBAAO,WAA8B7B,GAA9B,uFACkBuB,EAAAA,EAAAA,IAAA,UAClBJ,EADkB,iBACDnB,EADC,4BAC0BoB,IAF5C,cACCI,EADD,yBAIEA,EAASnB,MAJX,kE","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Error/Error.jsx","services/moviesAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  grid-gap: 12px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\nexport const CastItem = styled.li`\n  border-radius: 6px;\n  outline: 2px solid rgb(255, 49, 49, 0.5);\n  transition: color 250ms ease-in-out, background-color 250ms ease-in-out,\n    box-shadow 250ms ease-in-out, transform 250ms ease-in-out;\n  &:hover,\n  &:focus {\n    cursor: pointer;\n    outline: 2px solid white;\n    box-shadow: 2px 2px 6px 2px rgb(255, 49, 49, 0.7);\n    transform: scale(1.03);\n  }\n`;\n\nexport const ImgWrapper = styled.div`\n  border-radius: 10px;\n  overflow: hidden;\n  position: relative;\n  height: 260px;\n  > img {\n    object-fit: cover;\n  }\n`;\n\nexport const InfoWrapper = styled.div`\n  margin-top: 10px;\n  font-size: 18px;\n  padding: 10px;\n  overflow: hidden;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from '../../services/moviesAPI';\nimport { Loader } from 'components/Loader/Loader';\nimport Error from 'components/Error/Error';\nimport deafaultImg from '../../images/default-actor-image.jpg';\nimport { CastItem, CastList, ImgWrapper, InfoWrapper } from './Cast.styled';\n\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nconst Status = {\n  IDLE: 'idle',\n  LOADING: 'loading',\n  RESOLVE: 'resolve',\n  ERROR: 'error',\n};\n\nconst Cast = () => {\n  const [movieCast, setMovieCast] = useState();\n  const [status, setStatus] = useState(Status.IDLE);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setStatus(Status.LOADING);\n    getMovieCredits(movieId)\n      .then(data => {\n        setMovieCast(data.cast);\n        setStatus(Status.RESOLVE);\n      })\n      .catch(error => {\n        setMovieCast({});\n        setError(error);\n        setStatus(Status.ERROR);\n      });\n  }, [movieId]);\n\n  return (\n    <section>\n      {status === Status.RESOLVE && movieCast && movieCast.length > 0 ? (\n        <div>\n          <CastList>\n            {movieCast.map(\n              ({ credit_id, profile_path, original_name, character }) => (\n                <CastItem key={credit_id}>\n                  <ImgWrapper>\n                    <img\n                      src={\n                        profile_path\n                          ? `${BASE_IMG_URL}${profile_path}`\n                          : deafaultImg\n                      }\n                      alt={original_name}\n                    />\n                  </ImgWrapper>\n                  <InfoWrapper>\n                    <h4>{original_name}</h4>\n                    <p>Character: {character}</p>\n                  </InfoWrapper>\n                </CastItem>\n              )\n            )}\n          </CastList>\n        </div>\n      ) : (\n        <p>Sorry, there isn't any actors' info</p>\n      )}\n      {status === Status.LOADING && <Loader />}\n      {status === Status.ERROR && <Error>{error}</Error>}\n    </section>\n  );\n};\n\nexport default Cast;\n","import React from 'react';\n\nconst Error = ({ error }) => {\n  return <div>'Sorry, something went wrong :('</div>;\n};\n\nexport default Error;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'a661ef86e324b3ea2edd4f22cf9fb615';\n\nexport async function getTrendingMovies() {\n  const URL = `${BASE_URL}trending/all/day?api_key=${API_KEY}`;\n  const response = await axios.get(URL);\n  return response.data.results;\n}\n\nexport async function getMovieDetails(movieId) {     \n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}?api_key=${API_KEY}`\n  );\n  return response.data;\n}\n\nexport async function getMovieSearch(query) {     \n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  return response.data.results;\n}\nexport async function getMovieCredits(movieId) {     \n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function getMovieReview(movieId) {     \n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return response.data;\n}\n\n"],"names":["CastList","styled","CastItem","ImgWrapper","InfoWrapper","Status","useState","movieCast","setMovieCast","status","setStatus","error","setError","movieId","useParams","useEffect","getMovieCredits","then","data","cast","catch","length","map","credit_id","profile_path","original_name","character","src","deafaultImg","alt","Loader","Error","BASE_URL","API_KEY","getTrendingMovies","URL","axios","response","results","getMovieDetails","getMovieSearch","query","getMovieReview"],"sourceRoot":""}